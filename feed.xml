<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://rocketsumit.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://rocketsumit.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-08-24T05:58:12+00:00</updated><id>https://rocketsumit.github.io/feed.xml</id><title type="html">blank</title><subtitle>Portfolio website. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Gears in Motion - Unlocking Mechanical Marvels</title><link href="https://rocketsumit.github.io/blog/2025/gears/" rel="alternate" type="text/html" title="Gears in Motion - Unlocking Mechanical Marvels" /><published>2025-01-01T21:11:00+00:00</published><updated>2025-01-01T21:11:00+00:00</updated><id>https://rocketsumit.github.io/blog/2025/gears</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2025/gears/"><![CDATA[<p>Gears, the unsung heroes of machinery! These toothed wonders are like the teenage sidekicks of the engineering world – often overlooked, but secretly doing all the heavy lifting.
Let’s dive into the gear-y details, shall we?</p>

<h2 id="what-are-gears">What are gears?</h2>

<p>Gears are toothed mechanism used to transmit rotational motion and power between driving mechanism (e.g. motor) and the driven part (e.g. wheels). They are crucial for:</p>

<ul>
  <li>Changing rotational speed</li>
  <li>Adjusting torque</li>
  <li>Changing direction of motion</li>
  <li>Synchronizing rotational movement</li>
</ul>

<h2 id="types-of-gears">Types of gears</h2>

<p>Some commonly used gears are described below.</p>

<div class="row justify-content-md-center">
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/spur_gear-480.webp 480w,/assets/blogs/gears/spur_gear-800.webp 800w,/assets/blogs/gears/spur_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/spur_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Spur gear </div>
    </div>
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/helical_gear-480.webp 480w,/assets/blogs/gears/helical_gear-800.webp 800w,/assets/blogs/gears/helical_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/helical_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Helical gear </div>
    </div>
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/rack_gear-480.webp 480w,/assets/blogs/gears/rack_gear-800.webp 800w,/assets/blogs/gears/rack_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/rack_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Rack gear </div>
    </div>
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/worm_gear-480.webp 480w,/assets/blogs/gears/worm_gear-800.webp 800w,/assets/blogs/gears/worm_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/worm_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Worm gear </div>
    </div>
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/bevel_gear-480.webp 480w,/assets/blogs/gears/bevel_gear-800.webp 800w,/assets/blogs/gears/bevel_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/bevel_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Bevel gear </div>
    </div>
  <div class="col-sm-4 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/internal_gear-480.webp 480w,/assets/blogs/gears/internal_gear-800.webp 800w,/assets/blogs/gears/internal_gear-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/internal_gear.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Internal gear </div>
    </div>
</div>

<h2 id="spur-gears">Spur Gears</h2>

<p>The spur gears are the most commonly used gears. Let’s understand them in detail. There are three things to decide for each gear.</p>

<div class="row justify-content-md-center">
  <div class="col-sm-7 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/spur_gear_parameters-480.webp 480w,/assets/blogs/gears/spur_gear_parameters-800.webp 800w,/assets/blogs/gears/spur_gear_parameters-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/spur_gear_parameters.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Spur gear parameters. </div>
    </div>
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Reference diameter or Pitch circle diameter</code>: It is chosen based on geometry, torque and speed requirements. It decides how large the gear will be.</li>
  <li><code class="language-plaintext highlighter-rouge">Pressure angle</code>: It is usually 14.5 deg or 20 deg (most common).</li>
  <li><code class="language-plaintext highlighter-rouge">Module</code>: It determines the gear strength and load bearing capacity. Incresing module increases tooth thickness and strength, whereas reducing module increases the number of teeth giving smoother transmission. It is measured as (\(\frac{\text{Pitch circle diameter (reference diameter)}}{\text{Number of teeth}}\)).</li>
</ul>

<h2 id="gear-train">Gear Train</h2>

<p>And let’s not overlook the gear train – a veritable circus of spinning cogs, where proper module and pressure angle matchmaking is key to avoiding the dreaded “backlash”.</p>

<div class="row justify-content-md-center">
  <div class="col-sm-5 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/gear_ratio-480.webp 480w,/assets/blogs/gears/gear_ratio-800.webp 800w,/assets/blogs/gears/gear_ratio-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/gear_ratio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> The spacing between the gears is the average of their reference diameters. </div>
    </div>
  <div class="col-sm-5 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/gears/gear_train-480.webp 480w,/assets/blogs/gears/gear_train-800.webp 800w,/assets/blogs/gears/gear_train-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/gears/gear_train.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Gear train. </div>
    </div>
</div>

<p>To make gears work,</p>

<ul>
  <li>All gears in contact must have the same module and pressure angle.</li>
  <li>The spacing between two gears must be the average of their reference diameters.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Gear ratios</code>, the secret language of these mechanical marvels, allow us to manipulate speed and torque like puppet masters. The magic formula?</p>

\[\text{Gear ratio} = \frac{d_2}{d_1} = \frac{N_{\text{teeth}\ 2}}{N_{\text{teeth}\ 1}} = \frac{\omega_1}{\omega_2} = \frac{\tau_1}{\tau_2}\]

<p>where:</p>

<ul>
  <li>\(d =\) Reference diameter</li>
  <li>\(N_{\text{teeth}} =\) Number of teeth</li>
  <li>\(\omega =\) Angular speed</li>
  <li>\(\tau =\) Torque</li>
</ul>

<h2 id="backlash">Backlash</h2>

<p>Backlash is the clearance or play between the mating teeth of gears. It can cause issues like vibration, noise, and inaccurate positioning. To minimize backlash:</p>

<ul>
  <li>Use gears with precise, tight tolerances on the teeth.</li>
  <li>Adjust the center distance between gears to eliminate excess clearance.</li>
  <li>Employ pre-loaded gear arrangements, such as using spring-loaded idler gears.</li>
  <li>Use helical gears instead of spur gears, as the angled teeth help reduce backlash.</li>
  <li>Increase the number of teeth on the gears to distribute the load.</li>
  <li>Maintain proper lubrication to reduce wear and tear.</li>
</ul>

<p>So there you have it, folks – the secret lives of gears, where the tiniest of teeth can make a world of difference. Next time you hear the whir of machinery, take a moment to appreciate these unsung heroes, quietly doing their gear-y duty.</p>

<h2 id="references">References</h2>

<p>[1] <a href="https://khkgears.net/new/gear_knowledge/introduction_to_gears/types_of_gears.html">Types of Gear</a>. Available at: https://khkgears.net/new/gear_knowledge/introduction_to_gears/types_of_gears.html (Accessed: 24 January 2025).</p>

<p>[2] <a href="https://www.engineersedge.com/calculators/spur_gear_calculator_and_generator_15506.htm">Spur Gear Calculator and Generator</a>. Available at: https://www.engineersedge.com/calculators/spur_gear_calculator_and_generator_15506.htm (Accessed: 24 January 2025).</p>

<p>[3] <a href="https://en.wikipedia.org/wiki/Gear_train">Gear train</a> Available at: https://en.wikipedia.org/wiki/Gear_train (Accessed: 24 January 2025).</p>]]></content><author><name></name></author><category term="robotics" /><category term="mechatronics" /><summary type="html"><![CDATA[Discover the gear-y secrets behind the motion]]></summary></entry><entry><title type="html">Learning Resources</title><link href="https://rocketsumit.github.io/blog/2024/resources/" rel="alternate" type="text/html" title="Learning Resources" /><published>2024-10-08T21:15:00+00:00</published><updated>2024-10-08T21:15:00+00:00</updated><id>https://rocketsumit.github.io/blog/2024/resources</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2024/resources/"><![CDATA[<p>Some of the useful resources to learn new stuff or refresh concepts.</p>

<h2 id="c">C++</h2>

<ol>
  <li><a href="https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb">The Cherno</a> - YouTube videos</li>
</ol>

<h2 id="python">Python</h2>

<ol>
  <li><a href="https://github.com/zedr/clean-code-python">Clean Code Python</a> - Python clean style guide</li>
  <li><a href="https://github.com/gto76/python-cheatsheet">Python Cheatsheet</a></li>
  <li><a href="https://github.com/vinta/awesome-python">Awesome Python Frameworks</a></li>
</ol>

<h2 id="ml">ML</h2>

<ol>
  <li><a href="https://github.com/DorsaRoh/Machine-Learning">Machine Learning From Scratch</a> - Coding NN and transformers from scratch</li>
  <li><a href="https://github.com/afshinea/stanford-cs-229-machine-learning">Stanford Machine Learning Cheatsheets</a></li>
</ol>

<h2 id="robotics">Robotics</h2>

<ol>
  <li><a href="https://github.com/petercorke/robotics-toolbox-python">Robotics Toolbox</a></li>
  <li><a href="https://github.com/AtsushiSakai/PythonRobotics">Python Robotics</a> - Python codes for robotics algorithm</li>
  <li><a href="https://roboticseabass.com/2024/06/30/how-do-robot-manipulators-move/#aioseo-degrees-of-freedom-and-actuation">How do Robots Move</a> - Article</li>
  <li><a href="https://github.com/huggingface/lerobot">LeRobot</a></li>
</ol>

<h2 id="portfolio-websites-templates">Portfolio-Websites Templates</h2>

<ol>
  <li><a href="https://github.com/alshedivat/al-folio">AI Folio</a></li>
  <li><a href="https://mmistakes.github.io/minimal-mistakes/">Minimal Mistakes</a></li>
</ol>]]></content><author><name></name></author><category term="robotics" /><summary type="html"><![CDATA[Collection of useful learning resources]]></summary></entry><entry><title type="html">Path Planning Algorithms</title><link href="https://rocketsumit.github.io/blog/2024/motion-planning-algos/" rel="alternate" type="text/html" title="Path Planning Algorithms" /><published>2024-09-28T09:30:00+00:00</published><updated>2024-09-28T09:30:00+00:00</updated><id>https://rocketsumit.github.io/blog/2024/motion-planning-algos</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2024/motion-planning-algos/"><![CDATA[<p>In this blog post, I try to summarize some of the popularly used path planning algorithms in robotics.</p>

<ul>
  <li><a href="#non-sampling-based-algorithms">Non-Sampling-Based Algorithms</a>
    <ul>
      <li><a href="#dijkstra">Dijkstra</a></li>
      <li><a href="#a">A*</a></li>
    </ul>
  </li>
  <li><a href="#sampling-based-algorithms">Sampling-Based Algorithms</a>
    <ul>
      <li><a href="#rrt">RRT</a></li>
      <li><a href="#rrt-1">RRT*</a></li>
      <li><a href="#prm">PRM</a></li>
    </ul>
  </li>
</ul>

<h1 id="non-sampling-based-algorithms">Non-Sampling-Based Algorithms</h1>

<h2 id="dijkstra">Dijkstra</h2>

<p>A Greedy algorithm for finding the shortest path in a graph. It explores all nodes in all directions equally (like breadth-first search).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Input</span><span class="p">:</span> <span class="nc">Graph </span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="n">edges</span><span class="p">),</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span>

<span class="c1"># Initialize
</span><span class="n">Distance</span> <span class="n">to</span> <span class="nb">all</span> <span class="n">nodes</span> <span class="n">n</span><span class="p">,</span> <span class="n">D</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">inf</span>
<span class="n">Nodes</span> <span class="n">to</span> <span class="nf">visit </span><span class="p">(</span><span class="n">priority</span><span class="o">-</span><span class="n">queue</span><span class="p">),</span> <span class="n">V</span> <span class="o">=</span> <span class="nb">all</span> <span class="n">nodes</span>
<span class="n">D</span><span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">parent</span> <span class="n">node</span> <span class="n">pair</span> <span class="o">=</span> <span class="n">empty</span>

<span class="k">while</span> <span class="n">V</span> <span class="o">!=</span> <span class="n">empty</span>
    <span class="n">u</span> <span class="o">=</span> <span class="nf">pop</span><span class="p">(</span><span class="n">V</span><span class="p">)</span> <span class="c1"># get the node with minimum distance to start
</span>    <span class="k">for</span> <span class="nb">all</span> <span class="n">neighbours</span> <span class="n">of</span> <span class="n">u</span> <span class="k">as</span> <span class="n">v</span>
        <span class="k">if</span> <span class="nc">E</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>
            <span class="n">update</span> <span class="nf">parent</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">=</span> <span class="n">u</span>

<span class="c1"># Get the path from start to goal
</span><span class="n">target</span> <span class="o">=</span> <span class="n">goal</span>
<span class="n">u</span> <span class="o">=</span> <span class="nf">parent</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
<span class="n">path</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">while</span> <span class="n">parent</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="ow">or</span> <span class="n">u</span> <span class="o">=</span> <span class="n">source</span>
    <span class="n">path</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">u</span><span class="p">)</span> <span class="c1"># insert at beginning of list
</span>    <span class="n">u</span> <span class="o">=</span> <span class="nf">parent</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="a">A*</h2>

<p>Very similar to Dijkstra, but is heuristic driven i.e uses both the cost and estimated cost (heuristics) to reach current node. The heuristic helps guide the search towards the goal, making it more efficient.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add heuristics (H) to the cost
</span><span class="nc">E</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="nc">H</span><span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="o">+</span> <span class="n">D</span><span class="p">[</span><span class="n">u</span><span class="p">]</span><span class="o">&lt;</span> <span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span>
</code></pre></div></div>

<h1 id="sampling-based-algorithms">Sampling-Based Algorithms</h1>

<h2 id="rrt">RRT</h2>

<p>Rapidly exploring random trees (RRT) is a sampling based algorithm which incrementally builds a tree to efficiently sample high-dimensional spaces. RRT (even with more iterations) is not guaranteed to find a optimal path.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">Input</span><span class="p">:</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span><span class="p">,</span> <span class="n">max_iters</span><span class="p">,</span> <span class="n">step_size</span>

<span class="c1"># Initialize
</span><span class="n">tree</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="c1"># tree root with start node
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_iters</span><span class="p">):</span>
  <span class="n">rand_point</span> <span class="o">=</span> <span class="nf">sample_random_point</span><span class="p">()</span>  <span class="c1"># Randomly sample a point in the space
</span>  <span class="n">nearest_node</span> <span class="o">=</span> <span class="nf">find_nearest</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">rand_point</span><span class="p">)</span>  <span class="c1"># Find the nearest node in the tree
</span>  <span class="n">new_node</span> <span class="o">=</span> <span class="nf">steer</span><span class="p">(</span><span class="n">nearest_node</span><span class="p">,</span> <span class="n">rand_point</span><span class="p">,</span> <span class="n">step_size</span><span class="p">)</span>  <span class="c1"># Move towards the random point
</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="nf">collision_check</span><span class="p">(</span><span class="n">nearest_node</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>  <span class="c1"># Check for collisions
</span>    <span class="n">tree</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>  <span class="c1"># Add the new node to the tree
</span>  <span class="k">if</span> <span class="nf">distance</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">goal</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>  <span class="c1"># Check if close to goal
</span>    <span class="k">return</span> <span class="nf">construct_path</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span><span class="p">)</span>  <span class="c1"># Return the path to goal
</span>
<span class="k">return</span> <span class="bp">None</span>  <span class="c1"># No path found
</span></code></pre></div></div>

<h2 id="rrt-1">RRT*</h2>

<p>RRT* finds the optimal path by adding two more steps to RRT. 1) When adding a new node, choose the best parent for that node 2) rewire the entire tree i.e choose the best parent for entire tree. If given more iterations, RRT* is gauranteed to converge unlike RRT.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Initialize
</span><span class="n">tree</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">]</span> <span class="c1"># tree root with start node
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_iters</span><span class="p">):</span>
  <span class="n">rand_point</span> <span class="o">=</span> <span class="nf">sample_random_point</span><span class="p">()</span>  <span class="c1"># Randomly sample a point in the space
</span>  <span class="n">nearest_node</span> <span class="o">=</span> <span class="nf">find_nearest</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">rand_point</span><span class="p">)</span>  <span class="c1"># Find the nearest node in the tree
</span>  <span class="n">new_node</span> <span class="o">=</span> <span class="nf">steer</span><span class="p">(</span><span class="n">nearest_node</span><span class="p">,</span> <span class="n">rand_point</span><span class="p">,</span> <span class="n">step_size</span><span class="p">)</span>  <span class="c1"># Move towards the random point
</span>
  <span class="k">if</span> <span class="ow">not</span> <span class="nf">collision_check</span><span class="p">(</span><span class="n">nearest_node</span><span class="p">,</span> <span class="n">new_node</span><span class="p">):</span>  <span class="c1"># Check for collisions
</span>    <span class="c1"># Choose the best parent for new_node
</span>    <span class="n">best_parent</span> <span class="o">=</span> <span class="nf">choose_best_parent</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">new_node</span><span class="p">)</span>
    <span class="n">tree</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>  <span class="c1"># Add the new node to the tree
</span>    <span class="c1"># Rewire the tree to improve path quality
</span>    <span class="nf">rewire</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">new_node</span><span class="p">)</span>

  <span class="k">if</span> <span class="nf">distance</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">goal</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>  <span class="c1"># Check if close to goal
</span>    <span class="k">return</span> <span class="nf">construct_path</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span><span class="p">)</span>  <span class="c1"># Return the path to goal
</span>
<span class="k">return</span> <span class="bp">None</span>  <span class="c1"># No path found
</span></code></pre></div></div>

<h2 id="prm">PRM</h2>

<p>Probabilistic Roadmap (PRM) is a multi-query algorithm that constructs a graph (roadmap) by randomly sampling points from the environment and connecting them if they are close and collision-free. It is mainly used to efficiently explore paths in high-dimensional spaces. Once the graph is built, queries can be made to find paths between a start and goal point using search algorithms.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Input</span><span class="p">:</span> <span class="n">num_samples</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span>

<span class="c1"># Initialize
</span><span class="n">roadmap</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># empty roadmap (graph)
</span>
<span class="c1"># Phase 1: Roadmap Construction
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">num_samples</span><span class="p">):</span>
  <span class="n">sample</span> <span class="o">=</span> <span class="nf">sample_random_point</span><span class="p">()</span>  <span class="c1"># Sample free space
</span>  <span class="n">roadmap</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">sample</span><span class="p">)</span>

  <span class="n">neighbors</span> <span class="o">=</span> <span class="nf">find_nearest_neighbors</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">sample</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>  <span class="c1"># Find k nearest neighbors
</span>
  <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">neighbors</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">collision_check</span><span class="p">(</span><span class="n">sample</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">):</span>
    <span class="nf">add_edge</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">sample</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">)</span>

<span class="c1"># Phase 2: Path query
# Step 1: Connect start and goal to the roadmap
</span><span class="n">start_neighbors</span> <span class="o">=</span> <span class="nf">find_nearest_neighbors</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>  <span class="c1"># Find start neighbors
</span><span class="n">goal_neighbors</span> <span class="o">=</span> <span class="nf">find_nearest_neighbors</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">goal</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>    <span class="c1"># Find goal neighbors
</span>
<span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">start_neighbors</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">collision_check</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">):</span>
        <span class="nf">add_edge</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">)</span>
<span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">goal_neighbors</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">collision_check</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">):</span>
        <span class="nf">add_edge</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">goal</span><span class="p">,</span> <span class="n">neighbor</span><span class="p">)</span>

<span class="c1"># Step 2: Use graph search algorithm to find path
</span><span class="n">path</span> <span class="o">=</span> <span class="nf">graph_search</span><span class="p">(</span><span class="n">roadmap</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">goal</span><span class="p">)</span>  <span class="c1"># A* or Dijkstra's algorithm
</span><span class="k">return</span> <span class="n">path</span> <span class="k">if</span> <span class="n">path</span> <span class="k">else</span> <span class="bp">None</span>  <span class="c1"># Return path if found, otherwise None
</span></code></pre></div></div>]]></content><author><name></name></author><category term="robotics" /><category term="code" /><summary type="html"><![CDATA[Review of some popular path planning algorithms in robotics]]></summary></entry><entry><title type="html">Paper Review - SIMPLER</title><link href="https://rocketsumit.github.io/blog/2024/paper-review-SIMPLER/" rel="alternate" type="text/html" title="Paper Review - SIMPLER" /><published>2024-05-14T20:00:00+00:00</published><updated>2024-05-14T20:00:00+00:00</updated><id>https://rocketsumit.github.io/blog/2024/paper-review-SIMPLER</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2024/paper-review-SIMPLER/"><![CDATA[<h1 id="evaluating-real-world-robot-manipulation-policies-in-simulation"><a href="https://simpler-env.github.io">Evaluating Real-World Robot Manipulation Policies in Simulation</a></h1>

<p><strong>Xuanlin Li</strong><sup>*</sup><sup>1</sup>, <strong>Kyle Hsu</strong><sup>*</sup><sup>2</sup>, <strong>Jiayuan Gu</strong><sup>*</sup><sup>1</sup>, <strong>Karl Pertsch</strong><sup>†</sup><sup>2,3</sup>, <strong>Oier Mees</strong><sup>†</sup><sup>3</sup>, <strong>Homer Rich Walke</strong><sup>3</sup>, <strong>Chuyuan Fu</strong><sup>4</sup>, <strong>Ishikaa Lunawat</strong><sup>2</sup>, <strong>Isabel Sieh</strong><sup>2</sup>, <strong>Sean Kirmani</strong><sup>4</sup>, <strong>Sergey Levine</strong><sup>3</sup>, <strong>Jiajun Wu</strong><sup>2</sup>, <strong>Chelsea Finn</strong><sup>2</sup>, <strong>Hao Su</strong><sup>‡</sup><sup>1</sup>, <strong>Quan Vuong</strong><sup>‡</sup><sup>4</sup>, <strong>Ted Xiao</strong><sup>‡</sup><sup>4</sup></p>

<p><sup>*</sup>Equal contribution
<sup>†</sup>Core contributors
<sup>‡</sup>Equal advising</p>

<p><sup>1</sup>UC San Diego, <sup>2</sup>Stanford University, <sup>3</sup>UC Berkeley, <sup>4</sup>Google DeepMind</p>

<h2 id="1-how-should-we-evaluate-policies-trained-on-real-robot-data">1. How should we evaluate policies trained on real robot data?</h2>

<div class="row justify-content-md-center">
  <div class="col-sm-10 text-center">
      



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/1-480.webp 480w,/assets/paper-reviews/simpler/1-800.webp 800w,/assets/paper-reviews/simpler/1-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/1.png" class="img-fluid rounded z-depth-1" width="75%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

      <div class="caption text-center"> Train on real, evaluate in real </div>
    </div>
</div>

<p>Generally, roboticist evaluate policies (trained on realworld) in realworld. However, there are some problems associated with it.</p>

<ul>
  <li>People bump into cameras</li>
  <li>Gripper gets stuck</li>
  <li>Real-world evaluation is slow and tedious</li>
  <li>Difficult to reproduce experiments</li>
</ul>

<h2 id="2-potential-simpler-way">2. Potential SIMPLER way</h2>

<p>SIMPLER stands for <strong>SIMULATED MANIPULATION POLICY EVALUATION FOR REAL ROBOT SETUPS</strong></p>

<div class="row justify-content-md-center">
  <div class="col-sm-10 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/2-480.webp 480w,/assets/paper-reviews/simpler/2-800.webp 800w,/assets/paper-reviews/simpler/2-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Train on real, evaluate in real </div>
  </div>
</div>

<h2 id="3-how-real-and-simpler-performance-correlates">3. How real and SIMPLER performance correlates?</h2>

<div class="row justify-content-md-center">
  <div class="col-sm-5 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/correlation-480.webp 480w,/assets/paper-reviews/simpler/correlation-800.webp 800w,/assets/paper-reviews/simpler/correlation-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/correlation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Real and sim performance correlation </div>
  </div>
</div>

<h2 id="4-problem-definition">4. Problem definition</h2>

<ul>
  <li>NOT to obtain 1:1 reproduction of policies’ real-world behavior</li>
  <li>To guide policy improvement decisions</li>
  <li>Construct a simulator S with a strong correlation between relative performances in real and sim</li>
</ul>

<h2 id="5-metrics">5. Metrics</h2>

<p>The paper propose two metrics to measure the performance in sim vs real:</p>

<ul>
  <li>Pearson correlation coefficient (Pearson r)</li>
  <li>Mean Maximum Rank Violation (MMRV)</li>
</ul>

<div class="row justify-content-md-center">
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/pearson_coefficient-480.webp 480w,/assets/paper-reviews/simpler/pearson_coefficient-800.webp 800w,/assets/paper-reviews/simpler/pearson_coefficient-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/pearson_coefficient.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Pearson correlation coefficient (r) </div>
  </div>
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/mean_maximum_rank_violation-480.webp 480w,/assets/paper-reviews/simpler/mean_maximum_rank_violation-800.webp 800w,/assets/paper-reviews/simpler/mean_maximum_rank_violation-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/mean_maximum_rank_violation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Mean Maximum Rank Violation to overcome some limitation of Pearson correlation coefficient (r) </div>
  </div>
</div>

<h2 id="6-challenges-to-building-a-real-to-sim-evaluation-system">6. Challenges to building a real-to-sim evaluation system</h2>

<p><strong>6.1 Mitigating the Real-to-Sim Control Gap - SysID (System Identification)</strong></p>

<ul>
  <li>Optimize P,D values for sim controller (stiffness, damping factors)</li>
  <li>Play a demo trajectory actions on both sim and real</li>
</ul>

<div class="row justify-content-md-center">
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/sysid-480.webp 480w,/assets/paper-reviews/simpler/sysid-800.webp 800w,/assets/paper-reviews/simpler/sysid-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/sysid.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Minimizing the loss function to mitigate the control gap. </div>
  </div>
</div>

<p><strong>6.2 Mitigating the Real-to-Sim Visual Gap</strong></p>

<p>The goal is to match the simulator visuals to those of the real-world environment with only a modest amount of manual effort using <strong>Green screening and Texture matching</strong>.</p>

<div class="row justify-content-md-center">
  <div class="col-sm-8 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/visual_gap-480.webp 480w,/assets/paper-reviews/simpler/visual_gap-800.webp 800w,/assets/paper-reviews/simpler/visual_gap-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/visual_gap.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Replacing simulation background with real-world background and object textures with real-world textures. </div>
  </div>
</div>

<h2 id="7-simulation-setup">7. Simulation setup</h2>

<p>Two manipulation setups are used for different tasks.</p>

<div class="row justify-content-md-center">
  <div class="col-sm-10 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/simulation_setup-480.webp 480w,/assets/paper-reviews/simpler/simulation_setup-800.webp 800w,/assets/paper-reviews/simpler/simulation_setup-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/simulation_setup.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Simulation setup 1) Using Google Robot 2) Using WidowX robot (BrideData V2 dataset) </div>
  </div>
</div>

<h2 id="8-investigations-for-simulation-evaluations">8. Investigations for simulation evaluations</h2>

<p>The paper investigates the following key questions:</p>

<ul>
  <li>Relative performances in sim and real</li>
  <li>Sensitivity to various visual distribution shifts</li>
  <li>Sensitivity to control and visual gaps</li>
  <li>Sensitivity to physical property gaps</li>
  <li>Does results extend to different physics simulator?</li>
</ul>

<h2 id="9-experiment-setup">9. Experiment setup</h2>

<p>They evaluate different open-source robot policies on the simulation setup described above. For google robot, four versions of robot arm and gripper colors used.</p>

<ul>
  <li>RT-1 (Begin)</li>
  <li>RT-1 (15%)</li>
  <li>RT-1 (Converged)</li>
  <li>RT-1-X</li>
  <li>RT-2-X</li>
  <li>Octo-Base</li>
  <li>Octo-Small</li>
</ul>

<h2 id="10-results">10. Results</h2>

<p>SIMPLER can be used to evaluate diverse sets of rigid-body tasks (non-articulated / articulated objects, tabletop / non-tabletop tasks, shorter / longer horizon tasks), with many intra-task variations (e.g., different object combinations; different object / robot positions and orientations), for each of two robot embodiments (Google Robot and WidowX).</p>

<p><strong>10.1 Evaluating and comparing policies</strong></p>

<div class="row justify-content-md-center">
  <div class="col-sm-12 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/results_google_and_widow_robot-480.webp 480w,/assets/paper-reviews/simpler/results_google_and_widow_robot-800.webp 800w,/assets/paper-reviews/simpler/results_google_and_widow_robot-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/results_google_and_widow_robot.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Policy performances evaluated in SIMPLER have strong correlation with those in the real world (illustrated by low MMRV and high Pearson r). </div>
  </div>
</div>

<p><strong>10.2 Analyzing and predicting policy behaviors under distribution shifts</strong></p>

<div class="row justify-content-md-center">
  <div class="col-sm-12 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/results_distribution_shifts-480.webp 480w,/assets/paper-reviews/simpler/results_distribution_shifts-800.webp 800w,/assets/paper-reviews/simpler/results_distribution_shifts-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/results_distribution_shifts.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> SIMPLER can be used to analyze the policies' finegrained behaviors, such as their robustness to common distribution shifts like lightings, backgrounds, camera poses, distractor objects, and table textures. </div>
  </div>
</div>

<h2 id="11-ablations">11. Ablations</h2>

<div class="row justify-content-md-center">
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/ablation_effects_of_sysid-480.webp 480w,/assets/paper-reviews/simpler/ablation_effects_of_sysid-800.webp 800w,/assets/paper-reviews/simpler/ablation_effects_of_sysid-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/ablation_effects_of_sysid.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Control loss is proportional to the Mean Maximum Rank Violation. </div>
  </div>
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/ablations_effects_of_visual_matching-480.webp 480w,/assets/paper-reviews/simpler/ablations_effects_of_visual_matching-800.webp 800w,/assets/paper-reviews/simpler/ablations_effects_of_visual_matching-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/ablations_effects_of_visual_matching.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> Real-Sim Success Gap is miminum when all visual aspects of experiments match. </div>
  </div>
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/ablation_physical_properties-480.webp 480w,/assets/paper-reviews/simpler/ablation_physical_properties-800.webp 800w,/assets/paper-reviews/simpler/ablation_physical_properties-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/ablation_physical_properties.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> If physical properties of the objects are varied, the correlation still remains intact, have &lt;= 15% impact on success rates. </div>
  </div>
  <div class="col-sm-6 text-center">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/paper-reviews/simpler/ablation_simulation-480.webp 480w,/assets/paper-reviews/simpler/ablation_simulation-800.webp 800w,/assets/paper-reviews/simpler/ablation_simulation-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/paper-reviews/simpler/ablation_simulation.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

    <div class="caption"> The Real-Sim performance correlation is invariant to the simulator. </div>
  </div>
</div>

<h2 id="12-conclusion">12. Conclusion</h2>

<ul>
  <li>SIMPLER seems good proxy for real world policy evaluations</li>
  <li>Limitations
    <ul>
      <li>No manipulation tasks with soft-objects</li>
      <li>No tasks with high motion dynamics</li>
      <li>Green screening
        <ul>
          <li>Fixed cameras</li>
          <li>No shadows and visual details</li>
        </ul>
      </li>
      <li>Manual effort in creating simulation evaluation environments is still high</li>
    </ul>
  </li>
</ul>

<h2 id="13-bibtex">13. BibTex</h2>

<p>To cite this paper:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> @article{li24simpler,
        title={Evaluating Real-World Robot Manipulation Policies in Simulation},
        author={Xuanlin Li and Kyle Hsu and Jiayuan Gu and Karl Pertsch and Oier Mees and Homer Rich Walke and Chuyuan Fu and Ishikaa Lunawat and Isabel Sieh and Sean Kirmani and Sergey Levine and Jiajun Wu and Chelsea Finn and Hao Su and Quan Vuong and Ted Xiao},
        journal = {arXiv preprint arXiv:2405.05941},
        year={2024},
        }
</code></pre></div></div>]]></content><author><name></name></author><category term="robotics" /><category term="paper-reviews" /><summary type="html"><![CDATA[Evaluating Real-World Robot Manipulation Policies in Simulation]]></summary></entry><entry><title type="html">Illuminating Reads</title><link href="https://rocketsumit.github.io/blog/2024/books/" rel="alternate" type="text/html" title="Illuminating Reads" /><published>2024-02-29T11:00:00+00:00</published><updated>2024-02-29T11:00:00+00:00</updated><id>https://rocketsumit.github.io/blog/2024/books</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2024/books/"><![CDATA[<h3 id="autobiographiesbiographies">Autobiographies/Biographies</h3>

<ol>
  <li><strong>The Autobiography of Benjamin Franklin</strong> by Benjamin Franklin</li>
  <li><strong>The Story of My Experiments with Truth</strong> by Mahatma Gandhi</li>
</ol>

<h3 id="business--innovation">Business &amp; Innovation</h3>

<ol>
  <li><strong>Think and Grow Rich</strong> by Napoleon Hill</li>
  <li><strong>Jugaad Innovation: Think Frugal, Be Flexible, Generate Breakthrough Growth</strong> by Navi Radjou, Jaideep Prabhu, and Simone Ahuja</li>
  <li><strong>SPIN Selling</strong> by Neil Rackham</li>
</ol>

<h3 id="science--technology">Science &amp; Technology</h3>

<ol>
  <li><strong>A Brief History of Time</strong> by Stephen Hawking</li>
  <li><strong>Why We Sleep: Unlocking the Power of Sleep and Dreams</strong> by Matthew Walker</li>
  <li><strong>Sapiens: A Brief History of Humankind</strong> by Yuval Noah Harari</li>
  <li><strong>Breaking the Chains of Gravity: The Story of Spaceflight Before NASA</strong> by Amy Shira Teitel</li>
  <li><strong>Where Good Ideas Come From: The Natural History of Innovation</strong> by Steven Johnson</li>
  <li><strong>Who Owns the Future?</strong> by Jaron Lanier</li>
</ol>

<h3 id="self-help--psychology">Self-Help &amp; Psychology</h3>

<ol>
  <li><strong>How to Change the World: Social Entrepreneurs and the Power of New Ideas</strong> by David Bornstein</li>
  <li><strong>Ikigai: The Japanese Secret to a Long and Happy Life</strong> by Héctor García and Francesc Miralles</li>
  <li><strong>StrengthsFinder 2.0</strong> by Tom Rath</li>
  <li><strong>Thinking, Fast and Slow</strong> by Daniel Kahneman</li>
</ol>

<h3 id="writing--style">Writing &amp; Style</h3>

<ol>
  <li><strong>The Elements of Style</strong> by William Strunk Jr. and E.B. White</li>
</ol>]]></content><author><name></name></author><category term="books" /><summary type="html"><![CDATA[A curated collection of must-read books across biographies, business, science, and self-help.]]></summary></entry><entry><title type="html">Interesting facts about atoms and molecules</title><link href="https://rocketsumit.github.io/blog/2022/atoms-molecules/" rel="alternate" type="text/html" title="Interesting facts about atoms and molecules" /><published>2022-07-12T14:00:00+00:00</published><updated>2022-07-12T14:00:00+00:00</updated><id>https://rocketsumit.github.io/blog/2022/atoms-molecules</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2022/atoms-molecules/"><![CDATA[<h3 id="facts">Facts</h3>

<ul>
  <li>98% of the universe is hydrogen (\(H_2\)) and helium (\(He\))</li>
  <li>Molecules properties are very different from atoms
    <ul>
      <li>Hydrogen (\(H_2\)) is flammable, oxygen (\(O_2\)) helps others burn, and whereas water (\(H_2O\)) extinguishes fire !! :astonished:</li>
      <li>Sodium (\(Na\)) is explosive metal, clorine (\(Cl_2\)) is a deadly gas, and together they form table salt (\(NaCl\)) !! :astonished:</li>
    </ul>
  </li>
  <li>Carbon can form more molecules than all other elements combined</li>
</ul>

<h3 id="references">References</h3>

<p><a href="https://youtu.be/SqX70ypN7bA?si=u6N_bAlKucOJwXQp">Neil deGrasse Tyson, StarTalk</a></p>]]></content><author><name></name></author><category term="science" /><category term="facts" /><summary type="html"><![CDATA[Magic of atoms and molecules]]></summary></entry><entry><title type="html">Hyperparameter Tuning in Tensorflow With Hparams Dashboard</title><link href="https://rocketsumit.github.io/blog/2021/hyperparam/" rel="alternate" type="text/html" title="Hyperparameter Tuning in Tensorflow With Hparams Dashboard" /><published>2021-06-01T21:01:00+00:00</published><updated>2021-06-01T21:01:00+00:00</updated><id>https://rocketsumit.github.io/blog/2021/hyperparam</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2021/hyperparam/"><![CDATA[<p>The term <code class="language-plaintext highlighter-rouge">hyperparameter</code> is widely used when building machine learning models. The hyperparameters are those parameters on which other parameters, such as model weights and bias, depend. Examples of hyperparameters are learning rate, optimizer, number of hidden layers, number of neurons in each hidden layer, etc. Therefore, it is crucial to find the optimal set of hyperparameters for your problem, which often occurs through an experimentation process known as <code class="language-plaintext highlighter-rouge">Hyperparameter Tuning.</code></p>

<p>Tensorboard provides several tools through the Hparams dashboard to help seek the best hyperparameters through experimentation. You can follow up on the tutorial <a href="https://www.tensorflow.org/tensorboard/hyperparameter_tuning_with_hparams">here</a>.</p>

<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#contents">Contents</a></li>
  <li><a href="#the-usual-way">The usual way</a></li>
  <li><a href="#refactoring---without-using-nested-loops">Refactoring - without using nested loops</a></li>
  <li><a href="#if-you-are-not-a-fan-of-tensorboard">If you are not a fan of tensorboard</a></li>
  <li><a href="#references">References</a></li>
</ul>

<h2 id="the-usual-way">The usual way</h2>

<p>You may have to write multiple for loops to go through each hyperparameter, which you may want to avoid.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">HP_NUM_UNITS</span> <span class="o">=</span> <span class="n">hp</span><span class="p">.</span><span class="nc">HParam</span><span class="p">(</span><span class="sh">'</span><span class="s">num_units</span><span class="sh">'</span><span class="p">,</span> <span class="n">hp</span><span class="p">.</span><span class="nc">Discrete</span><span class="p">([</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">]))</span>
<span class="n">HP_DROPOUT</span> <span class="o">=</span> <span class="n">hp</span><span class="p">.</span><span class="nc">HParam</span><span class="p">(</span><span class="sh">'</span><span class="s">dropout</span><span class="sh">'</span><span class="p">,</span> <span class="n">hp</span><span class="p">.</span><span class="nc">RealInterval</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">))</span>
<span class="n">HP_OPTIMIZER</span> <span class="o">=</span> <span class="n">hp</span><span class="p">.</span><span class="nc">HParam</span><span class="p">(</span><span class="sh">'</span><span class="s">optimizer</span><span class="sh">'</span><span class="p">,</span> <span class="n">hp</span><span class="p">.</span><span class="nc">Discrete</span><span class="p">([</span><span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">]))</span>
<span class="n">METRIC_ACCURACY</span> <span class="o">=</span> <span class="sh">'</span><span class="s">loss</span><span class="sh">'</span>

<span class="bp">...</span>

<span class="k">for</span> <span class="n">num_units</span> <span class="ow">in</span> <span class="n">HP_NUM_UNITS</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">values</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">dropout_rate</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HP_DROPOUT</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">min_value</span><span class="p">,</span> <span class="n">HP_DROPOUT</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">max_value</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">optimizer</span> <span class="ow">in</span> <span class="n">HP_OPTIMIZER</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">values</span><span class="p">:</span>
      <span class="n">hparams</span> <span class="o">=</span> <span class="p">{</span>
          <span class="n">HP_NUM_UNITS</span><span class="p">:</span> <span class="n">num_units</span><span class="p">,</span>
          <span class="n">HP_DROPOUT</span><span class="p">:</span> <span class="n">dropout_rate</span><span class="p">,</span>
          <span class="n">HP_OPTIMIZER</span><span class="p">:</span> <span class="n">optimizer</span><span class="p">,</span>
      <span class="p">}</span>
      <span class="nf">print</span><span class="p">({</span><span class="n">h</span><span class="p">.</span><span class="n">name</span><span class="p">:</span> <span class="n">hparams</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">hparams</span><span class="p">})</span>
      <span class="c1"># run model with hparams
</span>      <span class="n">session_num</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<hr />

<h2 id="refactoring---without-using-nested-loops">Refactoring - without using nested loops</h2>

<p>A way to refactor the above code could be using the product() function from the itertools module. This function finds the cartesian product of multiple sets i.e returns each possible combination of set elements.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="n">param_values</span> <span class="o">=</span> <span class="p">[</span><span class="n">HP_NUM_UNITS</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="p">[</span><span class="n">d</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="p">(</span><span class="n">HP_DROPOUT</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">min_value</span><span class="p">,</span> <span class="n">HP_DROPOUT</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">max_value</span><span class="p">)],</span>
                <span class="n">HP_OPTIMIZER</span><span class="p">.</span><span class="n">domain</span><span class="p">.</span><span class="n">values</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">param_values</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">],</span> <span class="p">[</span><span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">]]</span>
<span class="nf">list</span><span class="p">(</span><span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">param_values</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[(</span><span class="mi">16</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">),</span>
<span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="sh">'</span><span class="s">sgd</span><span class="sh">'</span><span class="p">)]</span>
</code></pre></div></div>

<p>A single for loop can then be used to iterate over all combinations of hyperparameters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">num_units</span><span class="p">,</span> <span class="n">dropout_rate</span><span class="p">,</span> <span class="n">optimizer</span> <span class="ow">in</span> <span class="nf">list</span><span class="p">(</span><span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">param_values</span><span class="p">)):</span>
	<span class="n">hparams</span> <span class="o">=</span> <span class="p">{</span>
	        <span class="n">HP_NUM_UNITS</span><span class="p">:</span> <span class="n">num_units</span><span class="p">,</span>
	        <span class="n">HP_DROPOUT</span><span class="p">:</span> <span class="n">dropout_rate</span><span class="p">,</span>
	        <span class="n">HP_OPTIMIZER</span><span class="p">:</span> <span class="n">optimizer</span><span class="p">,</span>
	    <span class="p">}</span>
	<span class="n">run_name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run-%d</span><span class="sh">"</span> <span class="o">%</span> <span class="n">session_num</span>
	<span class="nf">print</span><span class="p">({</span><span class="n">h</span><span class="p">.</span><span class="n">name</span><span class="p">:</span> <span class="n">hparams</span><span class="p">[</span><span class="n">h</span><span class="p">]</span> <span class="k">for</span> <span class="n">h</span> <span class="ow">in</span> <span class="n">hparams</span><span class="p">})</span>
	<span class="c1"># run model with hparams
</span>	<span class="n">session_num</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<hr />

<h2 id="if-you-are-not-a-fan-of-tensorboard">If you are not a fan of tensorboard</h2>

<p>We’ll save all the data ourselves, so we can analyze it outside TensorBoard. We can utilize the panda’s data frame to keep all crucial parameters. It is recommended to use classes and objects for implementing the models. Here’s an example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="p">...):</span>
    <span class="bp">...</span>

    <span class="n">results</span> <span class="o">=</span> <span class="nc">OrderedDict</span><span class="p">()</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">run</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">run_count</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">epoch</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">epoch_count</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">loss</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">accuracy</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">epoch duration</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">epoch_duration</span>
    <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">batch size</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">run_duration</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">run_params</span><span class="p">.</span><span class="nf">_asdict</span><span class="p">().</span><span class="nf">items</span><span class="p">():</span> <span class="n">results</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="n">self</span><span class="p">.</span><span class="n">run_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>

    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="nf">from_dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">run_data</span><span class="p">,</span> <span class="n">orient</span><span class="o">=</span><span class="sh">'</span><span class="s">columns</span><span class="sh">'</span><span class="p">)</span>

    <span class="bp">...</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>run</th>
      <th>epoch</th>
      <th>loss</th>
      <th>accuracy</th>
      <th>epoch duration</th>
      <th>batch size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>0.994</td>
      <td>0.621</td>
      <td>20.2</td>
      <td>1024</td>
    </tr>
    <tr>
      <td>1</td>
      <td>2</td>
      <td>0.546</td>
      <td>0.814</td>
      <td>19.3</td>
      <td>1024</td>
    </tr>
    <tr>
      <td>1</td>
      <td>3</td>
      <td>0.434</td>
      <td>0.825</td>
      <td>20.5</td>
      <td>1024</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="references">References</h2>

<p><a href="https://deeplizard.com/learn/video/ycxulUVoNbk">Deep Lizard - Hyperparameter Tuning and Experimenting - Training Deep Neural Networks</a></p>

<p><a href="https://deeplizard.com/learn/video/ozpv_peZ894">Deep Lizard - CNN Training Loop Refactoring - Simultaneous Hyperparameter Testing</a></p>]]></content><author><name></name></author><category term="tech" /><category term="code" /><summary type="html"><![CDATA[The term hyperparameter is widely used when building machine learning models. The hyperparameters are those parameters on which other parameters, such as model weights and bias, depend. Examples of hyperparameters are learning rate, optimizer, number of hidden layers, number of neurons in each hidden layer, etc. Therefore, it is crucial to find the optimal set of hyperparameters for your problem, which often occurs through an experimentation process known as Hyperparameter Tuning.]]></summary></entry><entry><title type="html">Block Annoying Ads on Android Without Root!</title><link href="https://rocketsumit.github.io/blog/2021/adblock/" rel="alternate" type="text/html" title="Block Annoying Ads on Android Without Root!" /><published>2021-04-26T22:11:00+00:00</published><updated>2021-04-26T22:11:00+00:00</updated><id>https://rocketsumit.github.io/blog/2021/adblock</id><content type="html" xml:base="https://rocketsumit.github.io/blog/2021/adblock/"><![CDATA[<p>If you are sick of those in-app ads, especially while watching youtube videos or reading articles on the browser, then you are at the right place. You can eliminate advertisements without buying any premium app or rooting the phone.</p>

<p>There are a couple of methods to do so effectively.</p>

<h2 id="contents">Contents</h2>

<ul>
  <li><a href="#contents">Contents</a></li>
  <li><a href="#using-a-private-dns">Using a private DNS</a></li>
  <li><a href="#using-firefox-to-browse-and-watch-youtube">Using Firefox to browse and watch YouTube</a></li>
  <li><a href="#references">References</a></li>
</ul>

<h2 id="using-a-private-dns">Using a private DNS</h2>

<p>This is the easiest way to block ads on android by changing the DNS provider. This method requires no apps, but it only works on Android phones with Android 9 Pie and above, as the Private DNS setting was introduced with this version of the OS.</p>

<p>To change the DNS, go to Settings &gt; Network and Internet &gt; Advanced &gt; Private DNS. Choose Private DNS Provider Hostname, enter <code class="language-plaintext highlighter-rouge">dns.adguard.com</code> or <code class="language-plaintext highlighter-rouge">us.adhole.org,</code> and hit Save. That’s it. You’ll no longer see any in-app ad banners or advertisements on web browsers. However, some ads will still be visible, but at least those long video ads will be gone.</p>

<p>The path to changing the Private DNS may be different on some phones. If your phone UX has a search bar, search for Private DNS to land on the relevant settings page.</p>

<h2 id="using-firefox-to-browse-and-watch-youtube">Using Firefox to browse and watch YouTube</h2>

<p>This is what I currently use to block ads while reading and watching youtube, and it works perfectly. All you need is the Firefox browser with specific add-ons and settings.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/adblock/threedots-480.webp 480w,/assets/blogs/adblock/threedots-800.webp 800w,/assets/blogs/adblock/threedots-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/adblock/threedots.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

        <div class="caption">Click the three-dot menu option.</div>
    </div>
    <div class="col-sm mt-3 mt-md-0">
        



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/adblock/addons-480.webp 480w,/assets/blogs/adblock/addons-800.webp 800w,/assets/blogs/adblock/addons-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/adblock/addons.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

        <div class="caption">Click Add-ons.</div>
    </div>
    <div class="col-sm mt-3 mt-md-0">
        



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/adblock/uBlockOrigin-480.webp 480w,/assets/blogs/adblock/uBlockOrigin-800.webp 800w,/assets/blogs/adblock/uBlockOrigin-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/adblock/uBlockOrigin.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

        <div class="caption">Look for the uBlock Origin add-on and click the + button on the right.</div>
    </div>
</div>

<p>There you go for an add-less experience on your browser. The only catch is you will have to browse websites and articles and watch youtube videos on your Firefox browser. At first, it may seem inconvenient, but believe me, you will get used to it in a day. After all, a tiny sacrifice to get rid of ads on youtube!</p>

<p>Suppose you notice clipping of youtube videos in full-screen mode on Firefox. In that case, it is due to shortcomings of the firefox browser not optimized for higher aspect ratios than 16:9. But nothing to worry about; there is a fix.
Open add-ons in Firefox, go to settings of uBlock Origin and add the following filter.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>m.youtube.com##.html5-video-player :style(max-height: 100vh ! important)
youtube.com##player-container :style(max-height: 100vh ! important)
</code></pre></div></div>

<div class="row justify-content-md">
    



<figure>
  <picture>
    <!-- Auto scaling with imagemagick -->
    <!--
      See https://www.debugbear.com/blog/responsive-images#w-descriptors-and-the-sizes-attribute and
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images for info on defining 'sizes' for responsive images
    -->
    
      
        <source class="responsive-img-srcset" srcset="/assets/blogs/adblock/filter-480.webp 480w,/assets/blogs/adblock/filter-800.webp 800w,/assets/blogs/adblock/filter-1400.webp 1400w," type="image/webp" sizes="95vw" />
      
    
    <img src="/assets/blogs/adblock/filter.png" class="img-fluid rounded z-depth-1" width="50%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />
  </picture>

  
</figure>

</div>

<p>Enjoy!</p>

<hr />

<h2 id="references">References</h2>

<p><a href="https://www.xda-developers.com/block-ads-on-android/">XDA Developers - block ads</a></p>]]></content><author><name></name></author><category term="tech" /><category term="hack" /><summary type="html"><![CDATA[If you are sick of those in-app ads, especially while watching youtube videos or reading articles on the browser, then you are at the right place. You can eliminate advertisements without buying any premium app or rooting the phone.]]></summary></entry></feed>